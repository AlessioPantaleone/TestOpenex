<routes xmlns="http://camel.apache.org/schema/spring">
    <route id="openex-email">
        <from uri="direct:email"/>
        <setHeader headerName="contentType">
            <constant>text/html;charset=UTF-8</constant>
        </setHeader>
        <setHeader headerName="X-Auth-Token">
            <constant>{{openex.token}}</constant>
        </setHeader>
        <setHeader headerName="From">
            <simple>${body[sender]}</simple>
        </setHeader>
        <setHeader headerName="subject">
            <simple>${body[subject]}</simple>
        </setHeader>
        <setHeader headerName="attachments">
            <simple>${body[attachments]}</simple>
        </setHeader>
        <!-- Download attachments -->
        <bean ref="attachments-downloader"/>
        <!-- Prepare template -->
        <setHeader headerName="CamelFreemarkerTemplate">
            <simple>${body[body]}</simple>
        </setHeader>
        <!-- Send a mail for each user (openexStrategy is mandatory) -->
        <split streaming="true" parallelProcessing="true" strategyRef="openexStrategy">
            <simple>${body[users]}</simple>
            <setHeader headerName="To">
                <simple>${body[user_email]}</simple>
            </setHeader>
            <setHeader headerName="PgpKey">
                <simple>${body[user_pgp_key]}</simple>
            </setHeader>
            <!-- Put the current user as the marker model -->
            <setHeader headerName="CamelFreemarkerDataModel">
                <simple>${body}</simple>
            </setHeader>
            <to uri="freemarker:from_header"/>
            <!-- Encrypt the body and attachments with PGP -->
            <bean ref="pgp-encryption"/>
            <!-- Add attachments -->
            <bean ref="attachments-handler"/>
            <!-- Send the email -->
            <to uri="{{openex.worker_email_transport}}://{{openex.worker_email_host}}?password={{openex.worker_email_password}}&amp;username={{openex.worker_email_user}}&amp;sslContextParameters=#ssl-handler"/>
            <!-- Output message for callback -->
            <setBody>
                <simple>${header.To} success</simple>
            </setBody>
        </split>
    </route>
</routes>